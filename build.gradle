buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.1'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.1.0'
    }
}

allprojects {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'info.solidsoft.pitest'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    group               = "co.paralleluniverse"
    version             = "1.0.4-ullink7"
    status              = "integration"
    description         = "Simple Java deployment"
    ext.url             = "https://github.com/puniverse/capsule"
    ext.vendor          = "Parallel Universe Software Co."
    ext.licenseName     = "Eclipse Public License - v 1.0"
    ext.licenseUrl      = "http://www.eclipse.org/legal/epl-v10.html"
    ext.scmUrl          = "https://github.com/Itiviti/capsule"
    ext.scmConnection   = "https://github.com/Itiviti/capsule.git"
    ext.distDir         = "$buildDir/dist"
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    configurations {
        [compile, runtime]*.resolutionStrategy {
            failOnVersionConflict()
        }
    }

    dependencies {
        testImplementation 'junit:junit:4.12'
        testImplementation 'org.truth0:truth:0.23'
        testImplementation 'com.google.jimfs:jimfs:1.1'
        testImplementation 'org.jooq:joor:0.9.6'
    }

    test {
        systemProperty "java.protocol.handler.pkgs", "co.paralleluniverse.filesystem"

        beforeTest { desc ->
            logger.quiet("Running test: " + desc)
        }

        afterTest { desc, result ->
            if(result.resultType == TestResult.ResultType.FAILURE) {
                logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
                if(result.exception != null) {
                    result.exception.printStackTrace()
                }
            }
        }
    }

    pitest {
        targetClasses = ['Capsule', 'capsule.*', 'co.paralleluniverse.*']
        targetTests = ['CapsuleTest', 'capsule.*', 'co.paralleluniverse.*']

         jvmArgs = ['-Djava.protocol.handler.pkgs=co.paralleluniverse.filesystem']
    }

    task run(type: JavaExec, dependsOn:[testClasses]) {
        classpath = sourceSets.main.runtimeClasspath
        if(project.hasProperty('mainClass')){
            main = project.mainClass
        }
        if(project.hasProperty('args')){
            args project.args.split('\\s+')
        }
    }

    tasks.withType(JavaExec) {
        classpath += sourceSets.test.runtimeClasspath
    }

    jacocoTestReport {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
            csv.enabled = false
//          xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport_${project.name}.xml"
        }
    }

//  check.dependsOn jacocoTestReport

    javadoc {
        options.links = [ "http://docs.oracle.com/javase/7/docs/api/" ]
    }

    tasks.register('sourcesJar', Jar) {
        dependsOn classes
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    tasks.register('javadocJar', Jar) {
        dependsOn javadoc
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    //    tasks.withType(JavaCompile) {
    //        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    //    }

    ///////// Publish Artifacts
    apply plugin: 'maven'
    apply plugin: 'signing'

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    defaultTasks 'build'
}

project (':capsule') {
    dependencies {
        testImplementation project(':capsule-util')
    }

    jar {
        manifest {
            attributes('Main-Class'    : 'Capsule',
                       'Premain-Class' : 'Capsule')
        }
    }

    javadoc {
        options.noDeprecated = true
        excludes = [ "capsule/**" ]
    }
}

project (':capsule-util') {
    dependencies {
        runtimeOnly project(':capsule')
        implementation files("${System.getProperty('java.home')}/../lib/tools.jar")
    }

    javadoc {
        excludes = ["co/paralleluniverse/common/**",
                    "co/paralleluniverse/filesystem/**"
        ]
    }
}

tasks.register('jacocoRootReport', org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    sourceDirectories.from files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from files(subprojects.sourceSets.main.output)
    executionData.from files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}
